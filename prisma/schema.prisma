// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUTFORDEILIVEY
  DELIVERED
  CANCELLED
}

model User {
  id                       Int      @id @default(autoincrement())
  name                     String
  email                    String   @unique
  password                 String
  role                     Role     @default(USER)
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
  defaultShippingAddressId Int?
  defaultBillingAddressId  Int?

  addresses Address[]
  cartItems CartItem[]
  orders    Order[]

  @@map("users")
}

model Address {
  id         Int      @id @default(autoincrement())
  lineOne    String
  lineTwo    String?
  city       String
  country    String
  postcode   String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Category {
  id         Int      @id @default(autoincrement())
  title      String
  slug       String
  isActive   Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  price       Decimal
  tags        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  cartItems     CartItem[]
  orderProducts OrderProduct[]

  @@map("products")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id         Int              @id @default(autoincrement())
  userId     Int
  user       User             @relation(fields: [userId], references: [id])
  netAmount  Int
  address    String
  status     OrderEventStatus @default(PENDING)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  orderProducts OrderProduct[]
  events        OrderEvent[]

  @@map("orders")
}

model OrderProduct {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id         Int              @id @default(autoincrement())
  orderId    Int
  order      Order            @relation(fields: [orderId], references: [id])
  status     OrderEventStatus @default(PENDING)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@map("order_events")
}
